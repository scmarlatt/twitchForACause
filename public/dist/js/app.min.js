!function(){"use strict";angular.module("twitchForACause",["ui.router"])}(),function(){"use strict";function t(t){var n={name:"login",url:"/login",template:"<login-directive></login-directive>",resolve:{}},e={name:"landing",url:"/",template:"<browse-event-directive></browse-event-directive>"};t.state(n),t.state(e)}angular.module("twitchForACause").config(t),t.$inject=["$stateProvider"]}(),function(){"use strict";function t(t){function n(n){return t({url:"/api/events/",method:"GET",params:{_id:n}}).success(function(t){return t}).error(function(t){console.log("XHR Failed for getUserById."+t)})}function e(n){return t({url:"/api/user/newUser",method:"POST",data:n}).success(function(t){return t}).error(function(t){console.log("XHR Failed for addUser."+t)})}function r(n,e){return t({url:"/api/user/",method:"POST",params:{_id:n},data:e}).success(function(t){return t}).error(function(t){console.log("XHR Failed for updateUserInfoById."+t)})}return{getUserById:n,addUser:e,updateUserInfoById:r}}angular.module("twitchForACause").factory("userInfoService",t),t.$inject=["$http"]}(),function(){"use strict";function t(){function t(t,n,e,r){}var e={restrict:"EA",templateUrl:"dist/partials/landing/landing.html",link:t,controller:n,controllerAs:"bec",bindToController:!0};return e}function n(t,n,e){var r=this;r.events=["123","456","789","scomar1221","clintstevens","moonmoonow"],r.eventData={STREAMER:"kjhovey"},r.todaysGoal=1e3,r.totalRaised=647220,r.startEvent=function(){e.startEvent("iddqdow")},r.endEvent=function(){e.endEvent("iddqdow")},r.postNewEvent=function(t){e.postNewEvent(t).then(function(t){r.events=t.data})},r.deleteEvent=function(t){},r.init=function(){},r.init()}angular.module("twitchForACause").directive("browseEventDirective",t),n.$inject=["$scope","$http","browseEventDataService"]}(),function(){"use strict";function t(t){function n(n){return t({url:"api/twitch/event/start",method:"GET",params:{twitchId:n}}).success(function(t){return t}).error(function(t){console.log("XHR Failed for getUpcomingEvents."+t)})}function e(n){return t({url:"api/twitch/event/end",method:"GET",params:{twitchId:n}}).success(function(t){return t}).error(function(t){console.log("XHR Failed for getUpcomingEvents."+t)})}function r(n){return t({url:"/api/events/",method:"GET",params:{status:n}}).success(function(t){return t}).error(function(t){console.log("XHR Failed for getUpcomingEvents."+t)})}function i(n){return t.post("/api/events",n).success(function(t){return t}).error(function(t){console.log("XHR Failed for postNewEvent."+t)})}return{startEvent:n,endEvent:e,getEvents:r,postNewEvent:i}}angular.module("twitchForACause").factory("browseEventDataService",t),t.$inject=["$http"]}(),function(){"use strict";function t(){function t(t,n,e,r){}var e={restrict:"EA",templateUrl:"dist/partials/login/login.html",link:t,controller:n,controllerAs:"login",bindToController:!0};return e}function n(t){var n=this;n.init=function(){},n.init()}angular.module("twitchForACause").directive("loginDirective",t),n.$inject=["$scope"]}(),function(){"use strict";function t(){function t(t,n,e,r){}var e={restrict:"EA",link:t,controller:n,controllerAs:"tfac",bindToController:!0};return e}function n(t,n,e,r){var i=this;i.init=function(){},i.init()}angular.module("twitchForACause").directive("tfacDirective",t),n.$inject=["$scope","$http","mainDataService","userInfoService"]}(),function(){"use strict";function t(t){return{}}angular.module("twitchForACause").factory("mainDataService",t),t.$inject=["$http"]}(),function(){"use strict";function t(){function t(t,n,e,r){}var e={restrict:"EA",templateUrl:"dist/partials/nav.html",link:t,controller:n,controllerAs:"nc",bindToController:!0};return e}function n(t,n){var e=this;e.init=function(){},e.init()}angular.module("twitchForACause").directive("navDirective",t),n.$inject=["$scope","$http"]}();
//# sourceMappingURL=data:application/json;base64,
